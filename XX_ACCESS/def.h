#pragma once

#define XX_DEVICE_NAME L"XX_ACCESS"
#define XX_DEVICE_FILE L"\\\\.\\" XX_DEVICE_NAME
#define XX_FILE_DEVICE 0x8433

#define IOCTL_PRINT         CTL_CODE(XX_FILE_DEVICE, 0x800, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_INJECTCODE    CTL_CODE(XX_FILE_DEVICE, 0x801, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_SETPROTECTION CTL_CODE(XX_FILE_DEVICE, 0x802, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_PROTECTPROC   CTL_CODE(XX_FILE_DEVICE, 0x803, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_UNPROTECTPROC CTL_CODE(XX_FILE_DEVICE, 0x804, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
/*** PROCESS ***/
#define IOCTL_NTOPENPROCESS              CTL_CODE(XX_FILE_DEVICE, 0x1000, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTSUSPENDPROCESS           CTL_CODE(XX_FILE_DEVICE, 0x1001, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTRESUMEPROCESS            CTL_CODE(XX_FILE_DEVICE, 0x1002, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTQUERYSYSTEMINFORMATIONEX CTL_CODE(XX_FILE_DEVICE, 0x1003, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTQUERYINFORMATIONPROCESS  CTL_CODE(XX_FILE_DEVICE, 0x1004, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTSETINFORMATIONPROCESS    CTL_CODE(XX_FILE_DEVICE, 0x1005, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTFLUSHINSTRUCTIONCACHE    CTL_CODE(XX_FILE_DEVICE, 0x1006, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)

/*** MEMORY ***/
#define IOCTL_NTALLOCATEVIRTUALMEMORY CTL_CODE(XX_FILE_DEVICE, 0x1100, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTFLUSHVIRTUALMEMORY    CTL_CODE(XX_FILE_DEVICE, 0x1101, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTFREEVIRTUALMEMORY     CTL_CODE(XX_FILE_DEVICE, 0x1102, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTLOCKVIRTUALMEMORY     CTL_CODE(XX_FILE_DEVICE, 0x1103, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTUNLOCKVIRTUALMEMORY   CTL_CODE(XX_FILE_DEVICE, 0x1104, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTPROTECTVIRTUALMEMORY  CTL_CODE(XX_FILE_DEVICE, 0x1105, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTREADVIRTUALMEMORY     CTL_CODE(XX_FILE_DEVICE, 0x1106, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTWRITEVIRTUALMEMORY    CTL_CODE(XX_FILE_DEVICE, 0x1107, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTQUERYVIRTUALMEMORY    CTL_CODE(XX_FILE_DEVICE, 0x1108, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)

/*** THREAD ***/
#define IOCTL_NTOPENTHREAD             CTL_CODE(XX_FILE_DEVICE, 0x1200, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTCREATETHREADEX         CTL_CODE(XX_FILE_DEVICE, 0x1201, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTQUERYINFORMATIONTHREAD CTL_CODE(XX_FILE_DEVICE, 0x1202, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTSETINFORMATIONTHREAD   CTL_CODE(XX_FILE_DEVICE, 0x1203, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTGETCONTEXTTHREAD       CTL_CODE(XX_FILE_DEVICE, 0x1204, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTSETCONTEXTTHREAD       CTL_CODE(XX_FILE_DEVICE, 0x1205, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTRESUMETHREAD           CTL_CODE(XX_FILE_DEVICE, 0x1206, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_NTSUSPENDTHREAD          CTL_CODE(XX_FILE_DEVICE, 0x1207, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)

/*** SYNC ***/
#define IOCTL_NTWAITFORSINGLEOBJECT CTL_CODE(XX_FILE_DEVICE, 0x1300, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
/*** Handle ***/
#define IOCTL_NTDUPLICATEOBJECT CTL_CODE(XX_FILE_DEVICE, 0x1400, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_ISWOW64PROCESS    CTL_CODE(XX_FILE_DEVICE, 0x1404, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)

#define HANDLE_SIGNATURE      (1 << 31 | 1 << 29)
#define IsValidHandle(handle) (((SIZE_T)handle & HANDLE_SIGNATURE) && ((SIZE_T)handle % 4 == 0))
#define EncodeHandle(id)      (HANDLE)((SIZE_T)id | HANDLE_SIGNATURE)
#define DecodeHandle(handle)  (HANDLE)((SIZE_T)handle & ~HANDLE_SIGNATURE)

typedef struct _I_PRINT {
    char *text;
} I_PRINT, *PI_PRINT;

typedef struct _O_PRINT {
    char text[256];
} O_PRINT, *PO_PRINT;

typedef struct _IONTOPENPROCESS_ARGS {
    PHANDLE            ProcessHandle;
    ACCESS_MASK        DesiredAccess;
    POBJECT_ATTRIBUTES ObjectAttributes;
    PCLIENT_ID         ClientId;
} IONTOPENPROCESS_ARGS, *PIONTOPENPROCESS_ARGS;

typedef struct _IONTSUSPENDPROCESS_ARGS {
    HANDLE ProcessHandle;
} IONTSUSPENDPROCESS_ARGS, *PIONTSUSPENDPROCESS_ARGS;

typedef struct _IONTRESUMEPROCESS_ARGS {
    HANDLE ProcessHandle;
} IONTRESUMEPROCESS_ARGS, *PIONTRESUMEPROCESS_ARGS;

typedef struct _IONTQUERYSYSTEMINFORMATIONEX_ARGS {
    SYSTEM_INFORMATION_CLASS SystemInformationClass;
    PVOID                    InputBuffer;
    ULONG                    InputBufferLength;
    PVOID                    SystemInformation;
    ULONG                    SystemInformationLength;
    PULONG                   ReturnLength;
} IONTQUERYSYSTEMINFORMATIONEX_ARGS, *PIONTQUERYSYSTEMINFORMATIONEX_ARGS;

typedef struct _IONTQUERYINFORMATIONPROCESS_ARGS {
    HANDLE                    ProcessHandle;
    PROCESS_INFORMATION_CLASS ProcessInformationClass;
    PVOID                     ProcessInformation;
    ULONG                     ProcessInformationLength;
    PULONG                    ReturnLength;
} IONTQUERYINFORMATIONPROCESS_ARGS, *PIONTQUERYINFORMATIONPROCESS_ARGS;

typedef struct _IONTSETINFORMATIONPROCESS_ARGS {
    HANDLE           ProcessHandle;
    PROCESSINFOCLASS ProcessInformationClass;
    PVOID            ProcessInformation;
    ULONG            ProcessInformationLength;
} IONTSETINFORMATIONPROCESS_ARGS, *PIONTSETINFORMATIONPROCESS_ARGS;

typedef struct _IONTFLUSHINSTRUCTIONCACHE_ARGS {
    HANDLE ProcessHandle;
    PVOID  BaseAddress;
    ULONG  NumberOfBytesToFlush;
} IONTFLUSHINSTRUCTIONCACHE_ARGS, *PIONTFLUSHINSTRUCTIONCACHE_ARGS;

/*** Memory ***/
typedef struct _IONTALLOCATEVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID  *BaseAddress;
    SIZE_T  ZeroBits;
    PSIZE_T RegionSize;
    ULONG   AllocationType;
    ULONG   Protect;
} IONTALLOCATEVIRTUALMEMORY_ARGS, *PIONTALLOCATEVIRTUALMEMORY_ARGS;

typedef struct _IONTFLUSHVIRTUALMEMORY_ARGS {
    HANDLE           ProcessHandle;
    PVOID           *BaseAddress;
    PSIZE_T          RegionSize;
    PIO_STATUS_BLOCK IoStatus;
} IONTFLUSHVIRTUALMEMORY_ARGS, *PIONTFLUSHVIRTUALMEMORY_ARGS;

typedef struct _IONTFREEVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID  *BaseAddress;
    PSIZE_T RegionSize;
    ULONG   FreeType;
} IONTFREEVIRTUALMEMORY_ARGS, *PIONTFREEVIRTUALMEMORY_ARGS;

typedef struct _IONTLOCKVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID  *BaseAddress;
    PSIZE_T RegionSize;
    ULONG   LockOption;
} IONTLOCKVIRTUALMEMORY_ARGS, *PIONTLOCKVIRTUALMEMORY_ARGS;

typedef struct _IONTUNLOCKVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID  *BaseAddress;
    PSIZE_T RegionSize;
    ULONG   LockOption;
} IONTUNLOCKVIRTUALMEMORY_ARGS, *PIONTUNLOCKVIRTUALMEMORY_ARGS;

typedef struct _IONTPROTECTVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID  *BaseAddress;
    PSIZE_T RegionSize;
    ULONG   NewAccessProtection;
    PULONG  OldAccessProtection;
} IONTPROTECTVIRTUALMEMORY_ARGS, *PIONTPROTECTVIRTUALMEMORY_ARGS;

typedef struct _IONTREADVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID   BaseAddress;
    PVOID   Buffer;
    SIZE_T  NumberOfBytesToRead;
    PSIZE_T NumberOfBytesRead;
} IONTREADVIRTUALMEMORY_ARGS, *PIONTREADVIRTUALMEMORY_ARGS;

typedef struct _IONTWRITEVIRTUALMEMORY_ARGS {
    HANDLE  ProcessHandle;
    PVOID   BaseAddress;
    PVOID   Buffer;
    SIZE_T  NumberOfBytesToWrite;
    PSIZE_T NumberOfBytesWritten;
} IONTWRITEVIRTUALMEMORY_ARGS, *PIONTWRITEVIRTUALMEMORY_ARGS;

typedef struct _IONTQUERYVIRTUALMEMORY_ARGS {
    HANDLE                   ProcessHandle;
    PVOID                    BaseAddress;
    MEMORY_INFORMATION_CLASS MemoryInformationClass;
    PVOID                    MemoryInformation;
    SIZE_T                   MemoryInformationLength;
    PSIZE_T                  ReturnLength;
} IONTQUERYVIRTUALMEMORY_ARGS, *PIONTQUERYVIRTUALMEMORY_ARGS;

/*** Thread ***/
typedef struct _IONTOPENTHREAD_ARGS {
    PHANDLE            ThreadHandle;
    ACCESS_MASK        AccessMask;
    POBJECT_ATTRIBUTES ObjectAttributes;
    PCLIENT_ID         ClientId;
} IONTOPENTHREAD_ARGS, *PIONTOPENTHREAD_ARGS;

typedef struct _IONTCREATETHREADEX_ARGS {
    PHANDLE     hThread;
    ACCESS_MASK DesiredAccess;
    PVOID       ObjectAttributes;
    HANDLE      ProcessHandle;
    PVOID       lpStartAddress;
    PVOID       lpParameter;
    ULONG       Flags;
    SIZE_T      StackZeroBits;
    SIZE_T      SizeOfStackCommit;
    SIZE_T      SizeOfStackReserve;
    PVOID       lpBytesBuffer;
} IONTCREATETHREADEX_ARGS, *PIONTCREATETHREADEX_ARGS;

typedef struct _IONTQUERYINFORMATIONTHREAD_ARGS {
    HANDLE          ThreadHandle;
    THREADINFOCLASS ThreadInformationClass;
    PVOID           ThreadInformation;
    ULONG           ThreadInformationLength;
    PULONG          ReturnLength;
} IONTQUERYINFORMATIONTHREAD_ARGS, *PIONTQUERYINFORMATIONTHREAD_ARGS;

typedef struct _IONTSETINFORMATIONTHREAD_ARGS {
    HANDLE          ThreadHandle;
    THREADINFOCLASS ThreadInformationClass;
    PVOID           ThreadInformation;
    ULONG           ThreadInformationLength;
} IONTSETINFORMATIONTHREAD_ARGS, *PIONTSETINFORMATIONTHREAD_ARGS;

typedef struct _IONTGETCONTEXTTHREAD_ARGS {
    HANDLE   ThreadHandle;
    PCONTEXT Context;
} IONTGETCONTEXTTHREAD_ARGS, *PIONTGETCONTEXTTHREAD_ARGS;

typedef struct _IONTSETCONTEXTTHREAD_ARGS {
    HANDLE   ThreadHandle;
    PCONTEXT Context;
} IONTSETCONTEXTTHREAD_ARGS, *PIONTSETCONTEXTTHREAD_ARGS;

typedef struct _IONTRESUMETHREAD_ARGS {
    HANDLE ThreadHandle;
    PULONG SuspendCount;
} IONTRESUMETHREAD_ARGS, *PIONTRESUMETHREAD_ARGS;

typedef struct _IONTSUSPENDTHREAD_ARGS {
    HANDLE ThreadHandle;
    PULONG PreviousSuspendCount;
} IONTSUSPENDTHREAD_ARGS, *PIONTSUSPENDTHREAD_ARGS;

/*** Sync ***/
typedef struct _IONTWAITFORSINGLEOBJECT_ARGS {
    HANDLE         Handle;
    BOOLEAN        Alertable;
    PLARGE_INTEGER Timeout;
} IONTWAITFORSINGLEOBJECT_ARGS, *PIONTWAITFORSINGLEOBJECT_ARGS;

/*** Handle ***/
typedef struct _IONTDUPLICATEOBJECT_ARGS {
    HANDLE      SourceProcessHandle;
    HANDLE      SourceHandle;
    HANDLE      TargetProcessHandle;
    PHANDLE     TargetHandle;
    ACCESS_MASK DesiredAccess;
    ULONG       HandleAttributes;
    ULONG       Options;
} IONTDUPLICATEOBJECT_ARGS, *PIONTDUPLICATEOBJECT_ARGS;

typedef struct _IOISWOW64PROCESS_ARGS {
    HANDLE hProcess;
    PBOOL  Wow64Process;
} IOISWOW64PROCESS_ARGS, *PIOISWOW64PROCESS_ARGS;

typedef struct _I_INJECT_CODE {
    ULONG   pid;
    ULONG64 addr;
} I_INJECT_CODE, *PI_INJECT_CODE;

typedef struct _O_INJECT_CODE {
    ULONG64 returnVal;

} O_INJECT_CODE, *PO_INJECT_CODE;

typedef enum _PolicyOpt {
    Policy_Disable,
    Policy_Enable,
    Policy_Keep, // Don't change current value
} PolicyOpt;

typedef struct _IO_SET_PROC_PROTECTION {
    ULONG     pid;         // Process ID
    PolicyOpt protection;  // Process protection
    PolicyOpt dynamicCode; // DynamiCode policy
    PolicyOpt signature;   // BinarySignature policy
} IO_SET_PROC_PROTECTION, *PIO_SET_PROC_PROTECTION;

typedef struct _IO_PROTECT_PROC {
    ULONG pid;
} IO_PROTECT_PROC, *PIO_PROTECT_PROC;